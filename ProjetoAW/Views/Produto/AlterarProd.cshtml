@model ProjetoAW.Models.Produto

@{ ViewBag.Title = "AlterarProd"; }

<h2 class="--main-title">Alteração de Produto</h2>
@using (Html.BeginForm("AlterarProd", "Produto", FormMethod.Post, new { enctype = "multipart/form-data" }))
{
    @Html.AntiForgeryToken()
    @Html.EditorFor(model => model.codProduto, new { htmlAttributes = new { @class = "form-control", @hidden = "true"} })
    <div class="containerCadastro">
        <div class="cardCadastro">
            <div class="avatarCadastro">
                <div class="container containerProd">
                    <div class="wrapper wrapperProd">
                        <div class="image">
                            @if (Html.LabelFor(model => model.imagemProduto) == null)
                            {
                                <img id="preview-img" src="~/img/free-heart-icon.png" alt="">
                            }
                            else
                            {
                                <img id="preview-img" src="@ViewBag.imagem" alt="">
                            }
                        </div>
                        <div id="cancel-btn">
                            <i class="fas fa-times"></i>
                        </div>
                    </div>
                    <label id="labelFile" class="btnProd" for="default-button"><i class="fas fa-upload"></i> Escolha a imagem do produto</label>
                    <input type="file" name="file" id="default-button">
                </div>
            </div>
            <div class="dadosCadastro">
                <div class="linha">
                    <p>
                        @Html.LabelFor(model => model.nomeProduto, htmlAttributes: new { @class = "control-label", @style = "margin-bottom: 5px" })
                        @Html.EditorFor(model => model.nomeProduto, new { htmlAttributes = new { @class = "form-control", @style = "margin-bottom: 5px", @placeholder = "Digite o nome do produto", @required = "true" } })
                        @Html.ValidationMessageFor(model => model.nomeProduto, "", new { @class = "text-danger" })
                    </p>
                    <p>
                        @Html.LabelFor(model => model.quantidadeEstoque, htmlAttributes: new { @class = "control-label", @style = "margin-bottom: 5px" })
                        @Html.EditorFor(model => model.quantidadeEstoque, new { htmlAttributes = new { @class = "form-control", @style = "margin-bottom: 5px", @placeholder = "Digite a quantidade do produto", @required = "true" } })
                        @Html.ValidationMessageFor(model => model.quantidadeEstoque, "", new { @class = "text-danger" })
                    </p>
                </div>
                <div class="linha">
                    <p>
                        @Html.LabelFor(model => model.codFornecedor, htmlAttributes: new { @class = "control-label", @style = "margin-bottom: 5px" })
                        @Html.EditorFor(model => model.nomeFornecedor, new { htmlAttributes = new { @class = "form-control", @style = "margin-bottom: 5px", @disabled = "true" } })
                    </p>
                    <p>
                        @Html.LabelFor(model => model.codEspecie, htmlAttributes: new { @class = "control-label", @style = "margin-bottom: 5px" })
                        @Html.EditorFor(model => model.nomeEspecie, new { htmlAttributes = new { @class = "form-control", @style = "margin-bottom: 5px", @disabled = "true" } })
                    </p>
                </div>
                <div class="linha">
                    <p>
                        @Html.LabelFor(model => model.valorUnitario, htmlAttributes: new { @class = "control-label", @style = "margin-bottom: 5px" })

                        @Html.EditorFor(model => model.valorUnitario, new { htmlAttributes = new { @class = "form-control", @style = "margin-bottom: 5px", @placeholder = "Digite o valor do produto (R$)", @id = "valor", @onkeyup = "formatarMoeda()", @required = "true" } })
                        @Html.ValidationMessageFor(model => model.valorUnitario, "", new { @class = "text-danger" })
                    </p>
                    <p>
                        @Html.LabelFor(model => model.codCategoria, htmlAttributes: new { @class = "control-label", @style = "margin-bottom: 5px" })
                        @Html.EditorFor(model => model.nomeCategoria, new { htmlAttributes = new { @class = "form-control", @style = "margin-bottom: 5px", @disabled = "true" } })
                    </p>
                </div>
                <div class="linha">
                    <p>
                        @Html.LabelFor(model => model.descProduto, htmlAttributes: new { @class = "control-label", @style = "margin-bottom: 5px" })
                        @Html.TextArea("descProduto", (string)ViewBag.desc, new { @class = "form-control text-areaProd", placeholder = "Digite a descrição do produto", rows = "4", cols = "2", style = "resize:none; margin-bottom: 5px", name = "descProduto", @required = "true" })
                        @Html.ValidationMessageFor(model => model.descProduto, "", new { @class = "text-danger" })
                    </p>
                </div>
                <div class="linha btnCadastrar">
                    <button type="submit" class="btn btn-success btnCadastrar"><i class="fas fa-edit"></i> Alterar Produto</button>
                </div>
                <p>@ViewBag.Message</p>
            </div>
        </div>
    </div>
}

<script type="text/javascript">
    const wrapper = document.querySelector(".wrapper");
    const fileName = document.querySelector(".file-name");
    const defaultBtn = document.querySelector("#default-button");
    const customBtn = document.querySelector("#custom-btn");
    const cancelBtn = document.querySelector("#cancel-btn i");
    const img = document.querySelector("#preview-img");
    let regExp = /[0-9a-zA-Z\^\&\'\{\}\[\]\,\$\=\!\-\#\(\)\.\%\+\~\_ ]+$/;
    defaultBtn.addEventListener("change", function () {
        const file = this.files[0];
        if (file) {
            const reader = new FileReader();
            reader.onload = function () {
                const result = reader.result;
                img.src = result;
                wrapper.classList.add("active");
            }
            cancelBtn.addEventListener("click", function () {
                img.src = "/img/free-heart-icon.png";
                wrapper.classList.remove("active");
            })
            reader.readAsDataURL(file);
        }
        if (this.value) {
            let valueStore = this.value.match(regExp);
            fileName.textContent = valueStore;
        }
    });
</script>
