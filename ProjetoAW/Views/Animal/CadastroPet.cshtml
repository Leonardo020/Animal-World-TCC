@model ProjetoAW.Models.Animal

@{
    ViewBag.Title = "DadosPet";
}

<h2 class="--main-title">Cadastro de Pet</h2>

@using (Html.BeginForm("CadastroPet", "Animal", FormMethod.Post, new { enctype = "multipart/form-data" }))
{
    @Html.AntiForgeryToken()
    <div class="containerCadastro">
        <div class="cardCadastro">
            <div class="dadosCadastro">
                <div class="linha">
                    <p>@Html.LabelFor(model => model.nomeAnimal, htmlAttributes: new { @class = "control-label ", @style = "margin-bottom: 5px" }): @Html.EditorFor(model => model.nomeAnimal, new { htmlAttributes = new { @class = "form-control", @style = "margin-bottom: 5px", @placeholder="Digite o nome do animal" } })</p>
                    <p> @Html.LabelFor(model => model.idade, htmlAttributes: new { @class = "control-label", @style = "margin-bottom: 5px" }):@Html.EditorFor(model => model.idade, new { htmlAttributes = new { @class = "form-control", @style = "margin-bottom: 5px", @placeholder = "Digite a idade do animal" } })</p>
                </div>

                <div class="linha">
                    <p>
                        @Html.LabelFor(model => model.codEspecie, htmlAttributes: new { @class = "control-label ", @style = "margin-bottom: 5px" }): @Html.DropDownList("especies", null, "Selecione a espécie do animal", new { @class = "form-select", @style = "margin-bottom: 5px" })
                    </p>
                    <p>
                        @Html.LabelFor(model => model.codRaca, htmlAttributes: new { @class = "control-label ", @style = "margin-bottom: 5px" }): @Html.DropDownList("racas", null, "Selecione a raça do animal", new { @class = "form-select", @disabled = "true", @style = "margin-bottom: 5px" })
                    </p>
                </div>

                <div class="linha">
                    <p>
                        @Html.LabelFor(model => model.codPorte, htmlAttributes: new { @class = "control-label", @style = "margin-bottom: 5px" }): @Html.DropDownList("portes", null, "Selecione o porte do animal", new { @class = "form-select", @style = "margin-bottom: 5px" })
                    </p>
                    <p>
                        @Html.LabelFor(model => model.sexo, htmlAttributes: new { @class = "control-label", @style = "margin-bottom: 5px" }):
                        <br />
                        @Html.RadioButtonFor(model => model.sexo, "M", new { htmlAttributes = new { @class = "form-control", @style = "margin-bottom: 5px" } }) Macho
                        @Html.RadioButtonFor(model => model.sexo, "F", new { htmlAttributes = new { @class = "form-control", @style = "margin-bottom: 5px" } }) Fêmea
                    </p>
                </div>

                <div class="linha">
                    <p>@Html.LabelFor(model => model.descricaoAnimal, htmlAttributes: new { @class = "control-label ", @style = "margin-bottom: 5px" }): @Html.TextArea("descAnimal", (string)ViewBag.desc, new { @class = "form-control", placeholder = "Digite a descrição do animal", rows = "4", style = "resize:none; margin-bottom: 5px", name = "descAnimal" })</p>
                    <p>
                        @Html.LabelFor(model => model.temperamento, htmlAttributes: new { @class = "control-label ", @style = "margin-bottom: 5px" }):
                        <br />
                        @Html.RadioButtonFor(model => model.temperamento, "Agressivo", new { htmlAttributes = new { @class = "form-control" }, @style = "margin-bottom: 5px" }) Agressivo
                        @Html.RadioButtonFor(model => model.temperamento, "Tímido", new { htmlAttributes = new { @class = "form-control" }, @style = "margin-bottom: 5px" }) Tímido
                        @Html.RadioButtonFor(model => model.temperamento, "Passivo-agressivo", new { htmlAttributes = new { @class = "form-control" }, @style = "margin-bottom: 5px" }) Passivo-agressivo
                        <br />
                        @Html.RadioButtonFor(model => model.temperamento, "Sociável", new { htmlAttributes = new { @class = "form -control" }, @style = "margin-bottom: 5px" }) Sociável
                    </p>
                </div>

                <div class="linha btnCadastrar">
                    <button class="btn btn-success btnCadastrar"><i class="fas fa-plus-square"></i> Cadastrar Animal</button>
                </div>
                 <p>@ViewBag.Message</p>
            </div>
            <div class="avatarCadastro">
                <div class="container">
                    <div class="wrapper">
                        <div class="image">
                            <img id="preview-img" src="" alt="">
                        </div>
                        <div id="cancel-btn">
                            <i class="fas fa-times"></i>
                        </div>
                    </div>
                    <label id="labelFile" for="default-button"><i class="fas fa-paw"></i> Escolha a imagem do pet</label>
                    <input type="file" name="file" id="default-button">
                </div>
            </div>
        </div>

    </div>
}

<script type="text/javascript">
    const wrapper = document.querySelector(".wrapper");
    const fileName = document.querySelector(".file-name");
    const defaultBtn = document.querySelector("#default-button");
    const customBtn = document.querySelector("#custom-btn");
    const cancelBtn = document.querySelector("#cancel-btn i");
    const img = document.querySelector("#preview-img");
    let regExp = /[0-9a-zA-Z\^\&\'\{\}\[\]\,\$\=\!\-\#\(\)\.\%\+\~\_ ]+$/;
    defaultBtn.addEventListener("change", function () {
        const file = this.files[0];
        if (file) {
            const reader = new FileReader();
            reader.onload = function () {
                const result = reader.result;
                img.src = result;
                wrapper.classList.add("active");
            }
            cancelBtn.addEventListener("click", function () {
                img.src = "";
                wrapper.classList.remove("active");
            })
            reader.readAsDataURL(file);
        }
        if (this.value) {
            let valueStore = this.value.match(regExp);
            fileName.textContent = valueStore;
        }
    });

        $(document).ready(function () {

        $('#especies').change(function () {
            var idEspecie = $('#especies').val();
            if (idEspecie > 0) {
                $('#especies').prop('disabled', true);
                $.post('@Url.Action("obterRacasByEspecie", "Animal")', { 'idEspecie': idEspecie }, function (data) {
                    if (data.length > 0) {
                        $('#racas').empty();
                        $('#racas').append('<option value="" selected="">Selecione a raça do animal</option>');
                        for (var i = 0; i < data.length; i++) {
                            $('#racas').append('<option value="' + data[i].codRaca + '">' + data[i].nomeRaca + '</option>');
                        }
                    }
                    $('#especies').prop('disabled', false);
                    $('#racas').prop('disabled', false);
                });
            }
        });
    });

</script>

